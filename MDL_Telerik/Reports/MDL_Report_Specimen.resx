<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PictureBox1.Value" xml:space="preserve">
    <value>&lt;svg width="266" height="150" viewBox="0 0 266 150" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;
&lt;rect x="1.5" y="4.5" width="263" height="144" rx="12.5" stroke="#DFDFDF" stroke-width="3"/&gt;
&lt;path d="M6 6H85V8C85 13.5228 80.5228 18 75 18H16C10.4772 18 6 13.5228 6 8V6Z" fill="#DFDFDF"/&gt;
&lt;path d="M33.0898 13.4141C33.0898 13.9297 32.9036 14.3359 32.5312 14.6328C32.1615 14.9297 31.6458 15.0781 30.9844 15.0781C30.375 15.0781 29.8359 14.9635 29.3672 14.7344V13.6094C29.7526 13.7812 30.0781 13.9023 30.3438 13.9727C30.612 14.043 30.8568 14.0781 31.0781 14.0781C31.3438 14.0781 31.5469 14.0273 31.6875 13.9258C31.8307 13.8242 31.9023 13.6732 31.9023 13.4727C31.9023 13.3607 31.8711 13.2617 31.8086 13.1758C31.7461 13.0872 31.6536 13.0026 31.5312 12.9219C31.4115 12.8411 31.1654 12.7122 30.793 12.5352C30.444 12.3711 30.1823 12.2135 30.0078 12.0625C29.8333 11.9115 29.694 11.7357 29.5898 11.5352C29.4857 11.3346 29.4336 11.1003 29.4336 10.832C29.4336 10.3268 29.6042 9.92969 29.9453 9.64062C30.2891 9.35156 30.763 9.20703 31.3672 9.20703C31.6641 9.20703 31.9466 9.24219 32.2148 9.3125C32.4857 9.38281 32.7682 9.48177 33.0625 9.60938L32.6719 10.5508C32.3672 10.4258 32.1146 10.3385 31.9141 10.2891C31.7161 10.2396 31.5208 10.2148 31.3281 10.2148C31.099 10.2148 30.9232 10.2682 30.8008 10.375C30.6784 10.4818 30.6172 10.6211 30.6172 10.793C30.6172 10.8997 30.6419 10.9935 30.6914 11.0742C30.7409 11.1523 30.819 11.2292 30.9258 11.3047C31.0352 11.3776 31.2917 11.5104 31.6953 11.7031C32.2292 11.9583 32.5951 12.2148 32.793 12.4727C32.9909 12.7279 33.0898 13.0417 33.0898 13.4141ZM35.3359 11.9766H35.7344C36.1068 11.9766 36.3854 11.9036 36.5703 11.7578C36.7552 11.6094 36.8477 11.3945 36.8477 11.1133C36.8477 10.8294 36.7695 10.6198 36.6133 10.4844C36.4596 10.349 36.2174 10.2812 35.8867 10.2812H35.3359V11.9766ZM38.0703 11.0703C38.0703 11.6849 37.8776 12.1549 37.4922 12.4805C37.1094 12.806 36.5638 12.9688 35.8555 12.9688H35.3359V15H34.125V9.28906H35.9492C36.6419 9.28906 37.168 9.4388 37.5273 9.73828C37.8893 10.0352 38.0703 10.4792 38.0703 11.0703ZM42.4375 15H39.1484V9.28906H42.4375V10.2812H40.3594V11.5352H42.293V12.5273H40.3594V14H42.4375V15ZM46.0586 10.2148C45.6029 10.2148 45.25 10.3867 45 10.7305C44.75 11.0716 44.625 11.5482 44.625 12.1602C44.625 13.4336 45.1029 14.0703 46.0586 14.0703C46.4596 14.0703 46.9453 13.9701 47.5156 13.7695V14.7852C47.0469 14.9805 46.5234 15.0781 45.9453 15.0781C45.1146 15.0781 44.4792 14.8268 44.0391 14.3242C43.599 13.819 43.3789 13.0951 43.3789 12.1523C43.3789 11.5586 43.487 11.0391 43.7031 10.5938C43.9193 10.1458 44.2292 9.80339 44.6328 9.56641C45.0391 9.32682 45.5143 9.20703 46.0586 9.20703C46.6133 9.20703 47.1706 9.34115 47.7305 9.60938L47.3398 10.5938C47.1263 10.4922 46.9115 10.4036 46.6953 10.3281C46.4792 10.2526 46.2669 10.2148 46.0586 10.2148ZM50.8711 15H48.2734V14.3125L48.9688 13.9922V10.2969L48.2734 9.97656V9.28906H50.8711V9.97656L50.1758 10.2969V13.9922L50.8711 14.3125V15ZM54.2695 15L52.8945 10.5195H52.8594C52.9089 11.431 52.9336 12.0391 52.9336 12.3438V15H51.8516V9.28906H53.5L54.8516 13.6562H54.875L56.3086 9.28906H57.957V15H56.8281V12.2969C56.8281 12.1693 56.8294 12.0221 56.832 11.8555C56.8372 11.6888 56.8555 11.2461 56.8867 10.5273H56.8516L55.3789 15H54.2695ZM62.6875 15H59.3984V9.28906H62.6875V10.2812H60.6094V11.5352H62.543V12.5273H60.6094V14H62.6875V15ZM68.9492 15H67.4102L64.9258 10.6797H64.8906C64.9401 11.4427 64.9648 11.987 64.9648 12.3125V15H63.8828V9.28906H65.4102L67.8906 13.5664H67.918C67.8789 12.8242 67.8594 12.2995 67.8594 11.9922V9.28906H68.9492V15ZM73.7617 13.4141C73.7617 13.9297 73.5755 14.3359 73.2031 14.6328C72.8333 14.9297 72.3177 15.0781 71.6562 15.0781C71.0469 15.0781 70.5078 14.9635 70.0391 14.7344V13.6094C70.4245 13.7812 70.75 13.9023 71.0156 13.9727C71.2839 14.043 71.5286 14.0781 71.75 14.0781C72.0156 14.0781 72.2188 14.0273 72.3594 13.9258C72.5026 13.8242 72.5742 13.6732 72.5742 13.4727C72.5742 13.3607 72.543 13.2617 72.4805 13.1758C72.418 13.0872 72.3255 13.0026 72.2031 12.9219C72.0833 12.8411 71.8372 12.7122 71.4648 12.5352C71.1159 12.3711 70.8542 12.2135 70.6797 12.0625C70.5052 11.9115 70.3659 11.7357 70.2617 11.5352C70.1576 11.3346 70.1055 11.1003 70.1055 10.832C70.1055 10.3268 70.276 9.92969 70.6172 9.64062C70.9609 9.35156 71.4349 9.20703 72.0391 9.20703C72.3359 9.20703 72.6185 9.24219 72.8867 9.3125C73.1576 9.38281 73.4401 9.48177 73.7344 9.60938L73.3438 10.5508C73.0391 10.4258 72.7865 10.3385 72.5859 10.2891C72.388 10.2396 72.1927 10.2148 72 10.2148C71.7708 10.2148 71.5951 10.2682 71.4727 10.375C71.3503 10.4818 71.2891 10.6211 71.2891 10.793C71.2891 10.8997 71.3138 10.9935 71.3633 11.0742C71.4128 11.1523 71.4909 11.2292 71.5977 11.3047C71.707 11.3776 71.9635 11.5104 72.3672 11.7031C72.901 11.9583 73.2669 12.2148 73.4648 12.4727C73.6628 12.7279 73.7617 13.0417 73.7617 13.4141Z" fill="#987D3A"/&gt;
&lt;circle cx="12" cy="12" r="12" fill="#987D3A"/&gt;
&lt;path d="M9.27407 18.1386C8.48014 17.8105 7.91901 17.2511 7.59068 16.4603C7.26235 15.6694 7.26222 14.8771 7.59031 14.0832L9.72483 8.91787C9.40917 8.78742 9.1854 8.56336 9.0535 8.24569C8.92161 7.92801 8.92088 7.61134 9.05132 7.29568L9.52566 6.14784C9.6561 5.83219 9.88016 5.60841 10.1978 5.47652C10.5155 5.34462 10.8322 5.3439 11.1478 5.47434L16.8871 7.84603C17.2027 7.97647 17.4265 8.20053 17.5584 8.51821C17.6903 8.83589 17.691 9.15255 17.5606 9.46821L17.0862 10.6161C16.9558 10.9317 16.7317 11.1555 16.414 11.2874C16.0964 11.4193 15.7797 11.42 15.464 11.2896L13.3295 16.4548C13.0014 17.2488 12.442 17.8099 11.6512 18.1382C10.8604 18.4666 10.068 18.4667 9.27407 18.1386ZM10.1992 7.77002L15.9384 10.1417L16.4127 8.99387L10.6735 6.62218L10.1992 7.77002ZM9.7484 16.9908C10.2267 17.1884 10.7024 17.189 11.1755 16.9926C11.6486 16.7961 11.984 16.4588 12.1817 15.9805L10.4599 15.269L10.9343 14.1212L12.656 14.8327L13.1304 13.6848L11.4086 12.9733L11.8829 11.8255L13.6047 12.537L14.3162 10.8152L10.8727 9.3922L8.73815 14.5575C8.54051 15.0358 8.53991 15.5115 8.73634 15.9846C8.93278 16.4577 9.27014 16.7931 9.7484 16.9908Z" fill="white"/&gt;
&lt;/svg&gt;
</value>
  </data>
</root>